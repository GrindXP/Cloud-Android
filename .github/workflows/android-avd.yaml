name: High-End AVD with FRP Tunnel

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Session duration in hours (max 6)'
        required: false
        default: '4'
      api_level:
        description: 'Android API level'
        required: false
        default: '34'

jobs:
  run-emulator:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable KVM Hardware Acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install FRP Client v0.58.1
        run: |
          wget -q https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_amd64.tar.gz
          tar -xzf frp_0.58.1_linux_amd64.tar.gz
          sudo cp frp_0.58.1_linux_amd64/frpc /usr/local/bin/
          sudo chmod +x /usr/local/bin/frpc

      - name: Create FRP Client Configuration
        run: |
          cat > frpc.toml << 'EOF'
          serverAddr = "159.195.6.61"
          serverPort = 7000
          
          [[proxies]]
          name = "github-avd-adb"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5555
          remotePort = 5555
          
          [[proxies]]
          name = "github-avd-console"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5554
          remotePort = 5554
          
          [[proxies]]
          name = "github-scrcpy"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 27183
          remotePort = 27183
          EOF

      - name: Free Up Disk Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost

      - name: AVD Cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ github.event.inputs.api_level }}-pixel6pro-v2

      - name: Create AVD Snapshot (First Run Only)
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ github.event.inputs.api_level }}
          target: google_apis
          arch: x86_64
          profile: pixel_6_pro
          ram-size: 4096M
          heap-size: 512M
          disk-size: 8192M
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none
          disable-animations: true
          script: echo "AVD snapshot created"

      - name: Start FRP Tunnel
        run: |
          nohup frpc -c frpc.toml > frpc.log 2>&1 &
          sleep 5
          if pgrep -x "frpc" > /dev/null; then
            echo "‚úÖ FRP tunnel active"
            tail -5 frpc.log
          fi

      - name: Start Emulator and Keep Session Alive
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ github.event.inputs.api_level }}
          target: google_apis
          arch: x86_64
          profile: pixel_6_pro
          ram-size: 4096M
          heap-size: 512M
          disk-size: 8192M
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 4096 -cores 4 -skin 1080x2400
          disable-animations: true
          script: |
            set -e
            
            echo "========================================="
            echo "   üöÄ Android Emulator Started"
            echo "========================================="
            echo ""
            
            # List devices
            adb devices -l
            echo ""
            
            # Enable TCP/IP and wait for restart
            echo "‚öôÔ∏è  Enabling ADB over TCP/IP..."
            adb tcpip 5555
            sleep 5
            
            # Connect to local TCP
            adb connect 127.0.0.1:5555
            sleep 2
            
            # Device information
            echo ""
            echo "========================================="
            echo "   üì± Device Information"
            echo "========================================="
            echo "Android Version: $(adb -s 127.0.0.1:5555 shell getprop ro.build.version.release)"
            echo "API Level: $(adb -s 127.0.0.1:5555 shell getprop ro.build.version.sdk)"
            echo "CPU: $(adb -s 127.0.0.1:5555 shell getprop ro.product.cpu.abi)"
            echo "Model: $(adb -s 127.0.0.1:5555 shell getprop ro.product.model)"
            echo ""
            
            # Install scrcpy server
            echo "üì¶ Installing scrcpy server..."
            SCRCPY_VERSION=2.7
            wget -q https://github.com/Genymobile/scrcpy/releases/download/v${SCRCPY_VERSION}/scrcpy-server-v${SCRCPY_VERSION} -O scrcpy-server.jar
            adb -s 127.0.0.1:5555 push scrcpy-server.jar /data/local/tmp/scrcpy-server.jar
            echo "‚úÖ scrcpy server installed"
            echo ""
            
            # Connection instructions
            echo "========================================="
            echo "   üåê READY FOR REMOTE CONNECTION"
            echo "========================================="
            echo ""
            echo "Connect from YOUR local machine:"
            echo ""
            echo "  adb connect 159.195.6.61:5555"
            echo "  adb devices"
            echo ""
            echo "Screen mirroring with scrcpy:"
            echo "  scrcpy --serial 159.195.6.61:5555 --max-size 1920 --bit-rate 8M"
            echo ""
            echo "High quality mode:"
            echo "  scrcpy -s 159.195.6.61:5555 --max-size 2400 --bit-rate 16M"
            echo ""
            echo "Low latency mode:"
            echo "  scrcpy -s 159.195.6.61:5555 --max-size 1280 --bit-rate 4M"
            echo ""
            echo "========================================="
            echo "VPS IP: 159.195.6.61"
            echo "ADB Port: 5555"
            echo "Console Port: 5554"
            echo "scrcpy Port: 27183"
            echo "========================================="
            echo ""
            
            # Session configuration
            DURATION_HOURS=${{ github.event.inputs.duration }}
            DURATION_SECONDS=$((3600 * DURATION_HOURS))
            START_TIME=$(date +%s)
            
            echo "‚è±Ô∏è  Session duration: ${DURATION_HOURS} hours"
            echo "üïê Started at: $(date)"
            echo ""
            echo "Monitoring loop active..."
            echo ""
            
            # Keep-alive loop with monitoring
            ITERATION=0
            while true; do
              CURRENT_TIME=$(date +%s)
              ELAPSED=$((CURRENT_TIME - START_TIME))
              
              # Check duration
              if [ $ELAPSED -ge $DURATION_SECONDS ]; then
                echo ""
                echo "‚úÖ Session completed after ${DURATION_HOURS} hours"
                break
              fi
              
              # Calculate remaining time
              REMAINING=$((DURATION_SECONDS - ELAPSED))
              HOURS=$((REMAINING / 3600))
              MINUTES=$(((REMAINING % 3600) / 60))
              
              # Status update every 60 seconds
              ITERATION=$((ITERATION + 1))
              if [ $((ITERATION % 60)) -eq 0 ]; then
                # Check ADB connection
                DEVICES=$(adb devices | grep -c "5555.*device" || echo "0")
                
                # Check FRP status
                FRP_STATUS="‚ùå Stopped"
                if pgrep -x "frpc" > /dev/null; then
                  FRP_STATUS="‚úÖ Running"
                else
                  echo "‚ö†Ô∏è  FRP stopped! Restarting..."
                  nohup frpc -c frpc.toml > frpc.log 2>&1 &
                  sleep 3
                  FRP_STATUS="‚úÖ Restarted"
                fi
                
                echo "[$(date '+%H:%M:%S')] ‚è≥ ${HOURS}h ${MINUTES}m left | üì± ADB: ${DEVICES} | üîó FRP: ${FRP_STATUS}"
              fi
              
              sleep 1
            done
            
            echo ""
            echo "Session ended at: $(date)"

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: session-logs-${{ github.run_number }}
          path: |
            frpc.log
            frpc.toml
          retention-days: 7
