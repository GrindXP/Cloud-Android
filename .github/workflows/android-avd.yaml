name: High-End AVD with FRP Tunnel

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Session duration in hours (max 6)'
        required: false
        default: '4'
      api_level:
        description: 'Android API level'
        required: false
        default: '34'
        type: choice
        options:
          - '34'
          - '33'
          - '31'

jobs:
  run-emulator:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable KVM Hardware Acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls -la /dev/kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install FRP Client v0.58.1
        run: |
          wget -q https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_amd64.tar.gz
          tar -xzf frp_0.58.1_linux_amd64.tar.gz
          sudo cp frp_0.58.1_linux_amd64/frpc /usr/local/bin/
          sudo chmod +x /usr/local/bin/frpc
          frpc --version

      - name: Create FRP Client Configuration
        run: |
          cat > frpc.toml << 'EOF'
          # FRP Client Configuration (TOML format)
          serverAddr = "159.195.6.61"
          serverPort = 7000
          
          # Optional: Add authentication (uncomment if you set token on server)
          # auth.token = "your_token_here"
          
          # Proxy configurations
          [[proxies]]
          name = "github-avd-adb"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5555
          remotePort = 5555
          
          [[proxies]]
          name = "github-avd-console"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5554
          remotePort = 5554
          
          [[proxies]]
          name = "github-scrcpy"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 27183
          remotePort = 27183
          EOF
          
          echo "FRP configuration created:"
          cat frpc.toml

      - name: Free Up Disk Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          df -h

      - name: AVD Cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ github.event.inputs.api_level }}-pixel6pro

      - name: Create AVD Snapshot (First Run Only)
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ github.event.inputs.api_level }}
          target: google_apis
          arch: x86_64
          profile: pixel_6_pro
          ram-size: 4096M
          heap-size: 512M
          disk-size: 8192M
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none
          disable-animations: true
          script: echo "AVD snapshot created successfully"

      - name: Start FRP Tunnel
        run: |
          echo "Starting FRP tunnel to VPS 159.195.6.61:7000..."
          nohup frpc -c frpc.toml > frpc.log 2>&1 &
          FRPC_PID=$!
          echo $FRPC_PID > frpc.pid
          
          # Wait for FRP to establish connection
          sleep 5
          
          if pgrep -x "frpc" > /dev/null; then
            echo "✅ FRP tunnel started successfully (PID: $FRPC_PID)"
            echo "Tunnel logs:"
            tail -20 frpc.log
          else
            echo "❌ FRP tunnel failed to start"
            cat frpc.log
            exit 1
          fi

      - name: Run High-End Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ github.event.inputs.api_level }}
          target: google_apis
          arch: x86_64
          profile: pixel_6_pro
          ram-size: 4096M
          heap-size: 512M
          disk-size: 8192M
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 4096 -cores 4 -skin 1080x2400
          disable-animations: true
          script: |
            #!/bin/bash
            set -e
            
            echo "========================================"
            echo "   Android Emulator Started"
            echo "========================================"
            
            # Get emulator info
            adb devices -l
            
            # Enable TCP/IP mode
            echo "Enabling ADB over TCP/IP..."
            adb tcpip 5555
            sleep 3
            adb connect 127.0.0.1:5555
            
            # Display device information
            echo ""
            echo "========================================"
            echo "   Device Information"
            echo "========================================"
            echo "Android Version: $(adb shell getprop ro.build.version.release)"
            echo "API Level: $(adb shell getprop ro.build.version.sdk)"
            echo "CPU Architecture: $(adb shell getprop ro.product.cpu.abi)"
            echo "Device Model: $(adb shell getprop ro.product.model)"
            echo "Screen Density: $(adb shell wm density | cut -d' ' -f3)"
            echo "Screen Size: $(adb shell wm size | cut -d' ' -f3)"
            
            # Install scrcpy server
            echo ""
            echo "Installing scrcpy server..."
            SCRCPY_VERSION=2.7
            wget -q https://github.com/Genymobile/scrcpy/releases/download/v${SCRCPY_VERSION}/scrcpy-server-v${SCRCPY_VERSION}
            adb push scrcpy-server-v${SCRCPY_VERSION} /data/local/tmp/scrcpy-server.jar
            echo "✅ scrcpy server installed"
            
            # Connection information
            echo ""
            echo "========================================"
            echo "   Remote Access Instructions"
            echo "========================================"
            echo "📱 Connect from your local machine:"
            echo ""
            echo "   adb connect 159.195.6.61:5555"
            echo "   scrcpy --serial 159.195.6.61:5555 --max-size 1920 --bit-rate 8M"
            echo ""
            echo "🔧 Alternative scrcpy options:"
            echo "   # High quality mode"
            echo "   scrcpy -s 159.195.6.61:5555 --max-size 2400 --bit-rate 16M"
            echo ""
            echo "   # Low latency mode"
            echo "   scrcpy -s 159.195.6.61:5555 --max-size 1280 --bit-rate 4M --max-fps 30"
            echo ""
            echo "🌐 Your VPS: 159.195.6.61"
            echo "🔌 ADB Port: 5555"
            echo "🔌 Console Port: 5554"
            echo "🖥️  scrcpy Port: 27183"
            echo "========================================"
            
            # Calculate session duration
            DURATION_HOURS=${{ github.event.inputs.duration }}
            DURATION_SECONDS=$((3600 * DURATION_HOURS))
            START_TIME=$(date +%s)
            
            echo ""
            echo "⏱️  Session will run for ${DURATION_HOURS} hours"
            echo "Started at: $(date)"
            echo ""
            
            # Keep session alive with monitoring
            COUNTER=0
            while true; do
              CURRENT_TIME=$(date +%s)
              ELAPSED=$((CURRENT_TIME - START_TIME))
              
              # Check if duration reached
              if [ $ELAPSED -ge $DURATION_SECONDS ]; then
                echo ""
                echo "✅ Session duration completed. Shutting down..."
                break
              fi
              
              # Calculate remaining time
              REMAINING=$((DURATION_SECONDS - ELAPSED))
              HOURS=$((REMAINING / 3600))
              MINUTES=$(((REMAINING % 3600) / 60))
              SECONDS=$((REMAINING % 60))
              
              # Status update every minute
              COUNTER=$((COUNTER + 1))
              if [ $((COUNTER % 60)) -eq 0 ]; then
                CONNECTED_DEVICES=$(adb devices | grep -c "device$" || echo "0")
                echo "[$(date '+%H:%M:%S')] ⏳ ${HOURS}h ${MINUTES}m ${SECONDS}s remaining | 📱 Devices: ${CONNECTED_DEVICES} | 🔗 FRP: $(pgrep -x 'frpc' > /dev/null && echo 'Running ✅' || echo 'Stopped ❌')"
                
                # Check FRP tunnel status
                if ! pgrep -x "frpc" > /dev/null; then
                  echo "[$(date '+%H:%M:%S')] ⚠️  WARNING: FRP tunnel stopped. Restarting..."
                  nohup frpc -c frpc.toml > frpc.log 2>&1 &
                  sleep 3
                  echo "[$(date '+%H:%M:%S')] ✅ FRP tunnel restarted"
                fi
              fi
              
              sleep 1
            done
            
            echo ""
            echo "Session ended at: $(date)"

      - name: Upload FRP Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frp-logs-${{ github.run_number }}
          path: |
            frpc.log
            frpc.toml
          retention-days: 7

      - name: Upload Session Info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: session-info-${{ github.run_number }}
          path: |
            *.log
          retention-days: 7
