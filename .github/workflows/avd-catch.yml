name: persistent-avd-android11

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Session duration in minutes (max 360)'
        required: false
        default: '60'
        type: string

jobs:
  android-emulator:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
      # ============================================
      # STEP 1: Basic Setup
      # ============================================
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable KVM Hardware Acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls -la /dev/kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # ============================================
      # STEP 2: Free Up Disk Space
      # ============================================
      - name: Free Up Disk Space
        run: |
          echo "🗑️ Freeing up disk space..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo docker image prune --all --force
          sudo apt-get clean
          echo ""
          echo "📊 Available disk space:"
          df -h

      # ============================================
      # STEP 3: Install & Configure FRP Tunnel
      # ============================================
      - name: Install FRP Client v0.58.1
        run: |
          echo "📥 Installing FRP client..."
          wget -q https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_amd64.tar.gz
          tar -xzf frp_0.58.1_linux_amd64.tar.gz
          sudo cp frp_0.58.1_linux_amd64/frpc /usr/local/bin/
          sudo chmod +x /usr/local/bin/frpc
          rm -rf frp_0.58.1_linux_amd64*
          echo "✅ FRP client installed"

      - name: Create FRP Configuration
        run: |
          cat > frpc.toml << 'EOF'
          serverAddr = "159.195.6.61"
          serverPort = 7000
          transport.protocol = "kcp"
          
          [[proxies]]
          name = "github-avd-adb"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5555
          remotePort = 5555
          
          [[proxies]]
          name = "github-avd-console"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5554
          remotePort = 5554
          EOF
          echo "✅ FRP configuration created"

      - name: Start FRP Tunnel
        run: |
          echo "🚀 Starting FRP KCP tunnel..."
          nohup frpc -c frpc.toml > frpc.log 2>&1 &
          sleep 5
          if pgrep -x "frpc" > /dev/null; then
            echo "✅ FRP tunnel running"
            echo "📡 Remote access: 159.195.6.61:5555"
          else
            echo "❌ FRP tunnel failed to start"
            exit 1
          fi

      # ============================================
      # STEP 4: AVD Cache - CRITICAL FOR PERSISTENCE
      # ============================================
      - name: AVD Cache (Restore Previous State)
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30-persistent-v1
          restore-keys: |
            avd-30-persistent-v1

      - name: Check Cache Status
        run: |
          if [ "${{ steps.avd-cache.outputs.cache-hit }}" == "true" ]; then
            echo "✅ CACHE HIT - Restoring previous AVD state"
            echo "📦 All apps, data, and settings will be restored"
            ls -lah ~/.android/avd/ 2>/dev/null || echo "AVD directory being prepared..."
          else
            echo "🆕 FIRST RUN - Creating fresh AVD"
            echo "📝 This state will be saved for next run"
          fi

      # ============================================
      # STEP 5: Create Session Scripts
      # ============================================
      - name: Create Timer Script
        run: |
          cat > timer.sh << 'ENDSCRIPT'
          #!/bin/bash
          DURATION_MINUTES=$1
          DURATION_SECONDS=$((60 * DURATION_MINUTES))
          START_TIME=$(date +%s)
          
          echo "⏱️  Session Timer: ${DURATION_MINUTES} minutes"
          echo "🕐 Started: $(date '+%Y-%m-%d %H:%M:%S')"
          echo ""
          
          ITERATION=0
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -ge $DURATION_SECONDS ]; then
              echo ""
              echo "════════════════════════════════════════"
              echo "⏰ Session Complete - Auto-saving state"
              echo "💾 All apps will be preserved"
              echo "💾 All data will be saved"
              echo "💾 All files will persist"
              echo "🔄 Next run will restore this exact state"
              echo "════════════════════════════════════════"
              break
            fi
            
            REMAINING=$((DURATION_SECONDS - ELAPSED))
            MINUTES=$((REMAINING / 60))
            SECONDS=$((REMAINING % 60))
            
            ITERATION=$((ITERATION + 1))
            if [ $((ITERATION % 10)) -eq 0 ]; then
              DEVICES=$(adb devices 2>/dev/null | grep -c "device$" || echo "0")
              FRP_STATUS="✅"
              pgrep -x "frpc" > /dev/null || FRP_STATUS="❌"
              echo "[$(date '+%H:%M:%S')] ⏳ ${MINUTES}m ${SECONDS}s | 📱 Devices: ${DEVICES} | 🌐 Tunnel: ${FRP_STATUS}"
            fi
            
            sleep 1
          done
          ENDSCRIPT
          chmod +x timer.sh

      - name: Create Main Session Script
        run: |
          cat > session.sh << 'ENDSCRIPT'
          #!/bin/bash
          
          echo "════════════════════════════════════════"
          echo "   🤖 ROOTED ANDROID 11 EMULATOR"
          echo "   ⚡ MAXIMUM PERFORMANCE MODE"
          echo "   💾 AUTO-SAVE PERSISTENCE ENABLED"
          echo "════════════════════════════════════════"
          echo ""
          
          # Check for previous state
          SNAPSHOT_DIR="$HOME/.android/avd/test.avd/snapshots"
          if [ -d "$SNAPSHOT_DIR" ] && [ "$(ls -A $SNAPSHOT_DIR 2>/dev/null)" ]; then
            echo "🔄 RESTORED FROM PREVIOUS SESSION"
            echo "✅ All your apps are back"
            echo "✅ All your data is preserved"
            echo "✅ All your settings are restored"
          else
            echo "🆕 FIRST RUN - Clean Android 11"
            echo "📝 Your changes will be saved automatically"
          fi
          echo ""
          
          # Wait for device
          echo "⏳ Waiting for device..."
          adb wait-for-device
          sleep 3
          
          # Enable root access
          echo "🔓 Enabling root access..."
          adb root
          sleep 3
          adb wait-for-device
          sleep 2
          
          # Remount system as writable
          echo "📝 Making system writable..."
          adb remount
          sleep 2
          
          # Configure TCP/IP
          echo "🌐 Configuring network access..."
          adb tcpip 5555
          sleep 5
          adb connect 127.0.0.1:5555
          sleep 3
          
          # Verify connections
          echo ""
          echo "📱 Connected Devices:"
          adb devices -l
          
          echo ""
          echo "════════════════════════════════════════"
          echo "   📊 DEVICE SPECIFICATIONS"
          echo "════════════════════════════════════════"
          echo "Android: 11 (API Level 30)"
          echo "Architecture: x86_64"
          echo "RAM: 6 GB"
          echo "Storage: 12 GB"
          echo "CPU Cores: 4"
          echo "GPU: SwiftShader (Software)"
          echo "Root: ✅ FULL ACCESS"
          echo "System: ✅ Writable"
          echo "Persistence: ✅ Auto-save Enabled"
          echo ""
          
          # Root verification
          ROOT_CHECK=$(adb shell "whoami" 2>/dev/null | tr -d '
')
          if [ "$ROOT_CHECK" = "root" ]; then
            echo "🔐 Root Status: ✅ ACTIVE ($ROOT_CHECK)"
          else
            echo "🔐 Root Status: ⚠️  $ROOT_CHECK"
          fi
          
          echo ""
          echo "💾 Storage Info:"
          adb shell df -h /data 2>/dev/null | tail -n 1 || echo "⏳ Loading..."
          
          echo ""
          echo "🧠 Memory Info:"
          TOTAL_MEM=$(adb shell cat /proc/meminfo 2>/dev/null | grep MemTotal | awk '{print $2}')
          if [ -n "$TOTAL_MEM" ]; then
            TOTAL_MB=$((TOTAL_MEM / 1024))
            echo "Total RAM: ${TOTAL_MB} MB"
          fi
          
          echo ""
          echo "📦 Installed Packages:"
          PACKAGE_COUNT=$(adb shell pm list packages 2>/dev/null | wc -l)
          echo "Total: $PACKAGE_COUNT packages"
          
          echo ""
          echo "════════════════════════════════════════"
          echo "   🌐 REMOTE CONNECTION INFO"
          echo "════════════════════════════════════════"
          echo ""
          echo "Connect from ANY device using:"
          echo "  📍 IP: 159.195.6.61"
          echo "  🔌 Port: 5555"
          echo "  ⚡ Protocol: KCP (Ultra-low latency)"
          echo ""
          echo "ADB Commands:"
          echo "  $ adb connect 159.195.6.61:5555"
          echo "  $ adb devices"
          echo "  $ adb shell"
          echo "  $ adb install app.apk"
          echo "  $ adb push file.txt /sdcard/"
          echo "  $ adb pull /sdcard/file.txt"
          echo ""
          echo "App Installation:"
          echo "  • Use adb install command"
          echo "  • Install APKs via browser"
          echo "  • Install F-Droid or Aurora Store"
          echo "  • All installations are PERMANENT"
          echo ""
          echo "💾 DATA PERSISTENCE GUARANTEE:"
          echo "  ✅ Installed apps persist forever"
          echo "  ✅ App data is never deleted"
          echo "  ✅ Files remain across sessions"
          echo "  ✅ Settings are remembered"
          echo "  ✅ Downloads are preserved"
          echo "  🔄 Next workflow = Same state"
          echo ""
          echo "════════════════════════════════════════"
          echo "Session: $1 minutes | VPS: 159.195.6.61:5555"
          echo "Android 11 | 6GB RAM | 12GB Storage"
          echo "Root: FULL | KCP Tunnel | Persistent State"
          echo "════════════════════════════════════════"
          echo ""
          
          # Run session timer
          ./timer.sh "$1"
          
          echo ""
          echo "💾 Session ended - State auto-saved"
          echo "🔄 Run workflow again to continue from here"
          ENDSCRIPT
          chmod +x session.sh

      # ============================================
      # STEP 6: Set Duration
      # ============================================
      - name: Set Session Duration
        id: duration
        run: |
          DURATION="${{ github.event.inputs.duration }}"
          if [ -z "$DURATION" ] || [ "$DURATION" = "0" ]; then
            DURATION="60"
          fi
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "⏱️  Session duration set to: $DURATION minutes"

      # ============================================
      # STEP 7: Start AVD with Persistence
      # ============================================
      - name: Start Android Emulator (Persistent Mode)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: pixel_6_pro
          avd-name: test
          force-avd-creation: false
          ram-size: 6144M
          heap-size: 1024M
          disk-size: 12288M
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 6144 -cores 4 -writable-system
          disable-animations: true
          emulator-boot-timeout: 600
          script: ./session.sh ${{ steps.duration.outputs.duration }}

      # ============================================
      # STEP 8: Save State (Always runs)
      # ============================================
      - name: Save AVD State (Auto-backup)
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30-persistent-v1

      - name: Upload Session Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: session-logs-${{ github.run_number }}
          path: |
            frpc.log
            frpc.toml
          retention-days: 7
          if-no-files-found: warn

      # ============================================
      # STEP 9: Final Status
      # ============================================
      - name: Session Summary
        if: always()
        run: |
          echo ""
          echo "════════════════════════════════════════"
          echo "   📊 SESSION COMPLETE"
          echo "════════════════════════════════════════"
          echo "✅ AVD state has been saved"
          echo "✅ All apps are preserved"
          echo "✅ All data is backed up"
          echo "✅ Next run will restore everything"
          echo ""
          echo "Run workflow again to continue!"
          echo "════════════════════════════════════════"
