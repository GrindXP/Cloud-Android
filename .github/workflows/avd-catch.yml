name: avd-cache

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Session duration in minutes (max 360)'
        required: false
        default: '5'

jobs:
  run-emulator:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable KVM Hardware Acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Free Up Disk Space
        run: |
          echo "🗑️ Freeing up disk space..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo docker image prune --all --force
          sudo apt-get clean
          df -h

      - name: Install FRP Client v0.58.1
        run: |
          wget -q https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_amd64.tar.gz
          tar -xzf frp_0.58.1_linux_amd64.tar.gz
          sudo cp frp_0.58.1_linux_amd64/frpc /usr/local/bin/
          sudo chmod +x /usr/local/bin/frpc
          rm -rf frp_0.58.1_linux_amd64*

      - name: Create FRP Client Configuration with KCP
        run: |
          cat > frpc.toml << 'EOF'
          serverAddr = "159.195.6.61"
          serverPort = 7000
          transport.protocol = "kcp"
          
          [[proxies]]
          name = "github-avd-adb"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5555
          remotePort = 5555
          
          [[proxies]]
          name = "github-avd-console"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5554
          remotePort = 5554
          EOF

      - name: Restore AVD Snapshot Cache
        uses: actions/cache/restore@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30-persistent-snapshot-${{ github.run_id }}
          restore-keys: |
            avd-30-persistent-snapshot-

      - name: Create Initial AVD (First Run Only)
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: pixel_6_pro
          ram-size: 6144M
          heap-size: 1024M
          disk-size: 12288M
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -writable-system
          disable-animations: true
          script: |
            echo "✅ Creating fresh AVD for first time..."
            adb root
            adb wait-for-device
            echo "✅ AVD initialized - snapshot will be saved automatically"

      - name: Start FRP KCP Tunnel
        run: |
          echo "🚀 Starting FRP with KCP protocol..."
          nohup frpc -c frpc.toml > frpc.log 2>&1 &
          sleep 5
          if pgrep -x "frpc" > /dev/null; then
            echo "✅ FRP KCP tunnel started"
          fi

      - name: Create Monitoring Script
        run: |
          cat > monitor.sh << 'SCRIPT'
          #!/bin/bash
          DURATION_MINUTES=$1
          DURATION_SECONDS=$((60 * DURATION_MINUTES))
          START_TIME=$(date +%s)
          
          echo "⏱️  Session: ${DURATION_MINUTES} minutes"
          echo "🕐 Started: $(date)"
          echo "🔥 Protocol: KCP (30-40% lower latency)"
          echo "🔓 Root: ✅ Full Access"
          echo "💾 RAM: 6GB | Storage: 12GB"
          echo "🤖 Android 11 (API 30)"
          echo "💽 Snapshot: ✅ Auto-save enabled"
          echo "📦 Data Persistence: All apps & files preserved"
          echo "🚀 Maximum Performance Mode"
          echo ""
          
          ITERATION=0
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -ge $DURATION_SECONDS ]; then
              echo ""
              echo "========================================="
              echo "⏱️  Timer completed - Saving snapshot..."
              echo "========================================="
              echo "💾 All installed apps will be preserved"
              echo "📁 All data and files will be saved"
              echo "🔄 Next run will restore this exact state"
              echo "========================================="
              break
            fi
            
            REMAINING=$((DURATION_SECONDS - ELAPSED))
            MINUTES=$((REMAINING / 60))
            SECONDS=$((REMAINING % 60))
            
            ITERATION=$((ITERATION + 1))
            if [ $((ITERATION % 10)) -eq 0 ]; then
              DEVICES=$(adb devices | grep -c "5555.*device" || echo "0")
              FRP_STATUS="✅"
              pgrep -x "frpc" > /dev/null || FRP_STATUS="❌"
              echo "[$(date '+%H:%M:%S')] ⏳ ${MINUTES}m ${SECONDS}s | 📱 ADB: ${DEVICES} | 🔗 KCP: ${FRP_STATUS}"
            fi
            
            sleep 1
          done
          SCRIPT
          chmod +x monitor.sh

      - name: Create AVD Session Script
        run: |
          cat > session.sh << 'SESSIONSCRIPT'
          #!/bin/bash
          
          echo "========================================="
          echo "   🚀 Rooted Android 11"
          echo "   💪 MAXIMUM PERFORMANCE"
          echo "   💽 SNAPSHOT AUTO-SAVE ENABLED"
          echo "========================================="
          echo ""
          
          # Check if restoring from previous session
          if [ -f "$HOME/.android/avd/test.avd/snapshots/default_boot/snapshot.pb" ]; then
            echo "🔄 Restored from previous session!"
            echo "📦 All your apps and data are preserved"
            echo ""
          else
            echo "🆕 This is a fresh AVD - no previous snapshot found"
            echo ""
          fi
          
          # Enable root
          adb root
          adb wait-for-device
          adb remount
          
          # Enable TCP/IP
          adb tcpip 5555
          sleep 5
          adb connect 127.0.0.1:5555
          sleep 2
          
          echo ""
          echo "========================================="
          echo "   📱 Device Specifications"
          echo "========================================="
          echo "Android: 11 (API 30)"
          echo "RAM: 6GB"
          echo "Storage: 12GB"
          echo "CPU: 4 cores (x86_64)"
          echo "GPU: SwiftShader (software rendering)"
          echo "Root: ✅ Full Access"
          echo "System: Writable"
          echo "Snapshot: ✅ Auto-save on timer end"
          echo ""
          
          # Verify root
          echo "🔐 Root Access:"
          adb shell "whoami"
          
          echo ""
          echo "💾 Storage Available:"
          adb -s 127.0.0.1:5555 shell df -h /data | grep -v Filesystem
          
          echo ""
          echo "🧠 Memory:"
          adb -s 127.0.0.1:5555 shell cat /proc/meminfo | grep MemTotal
          
          echo ""
          echo "========================================="
          echo "   🌐 CONNECTION INFO"
          echo "========================================="
          echo ""
          echo "📱 Connect from your device:"
          echo "   • IP: 159.195.6.61"
          echo "   • Port: 5555"
          echo "   • Protocol: KCP (Low Latency)"
          echo ""
          echo "💻 ADB Commands:"
          echo "   adb connect 159.195.6.61:5555"
          echo "   adb devices"
          echo "   adb root (already enabled)"
          echo "   adb shell (root shell access)"
          echo "   adb install app.apk"
          echo ""
          echo "📦 Install Apps:"
          echo "   • Download APKs from browser"
          echo "   • Install Aurora Store manually"
          echo "   • Use adb install command"
          echo ""
          echo "💽 DATA PERSISTENCE:"
          echo "   ✅ All apps you install will be saved"
          echo "   ✅ All files you create will be preserved"
          echo "   ✅ All settings will be remembered"
          echo "   ✅ Next workflow run restores everything"
          echo ""
          echo "========================================="
          echo "⏱️  Session Duration: $1 minutes"
          echo "VPS: 159.195.6.61:5555"
          echo "Protocol: KCP (UDP) - 30-40% Lower Latency"
          echo "Android: 11 | RAM: 6GB | Storage: 12GB"
          echo "Root: ✅ FULL ACCESS"
          echo "Performance: 🚀 MAXIMUM"
          echo "Persistence: 💽 AUTO-SAVE SNAPSHOT"
          echo "========================================="
          echo ""
          
          # Run monitoring
          ./monitor.sh $1
          
          echo ""
          echo "💾 Preparing to save snapshot..."
          echo "⏳ Please wait for emulator to close properly..."
          SESSIONSCRIPT
          chmod +x session.sh

      - name: Start Rooted Emulator with Auto-Save Snapshot
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: pixel_6_pro
          ram-size: 6144M
          heap-size: 1024M
          disk-size: 12288M
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 6144 -cores 4 -skin 1080x2400 -writable-system
          disable-animations: true
          script: ./session.sh ${{ github.event.inputs.duration }}

      - name: Save AVD Snapshot to Cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30-persistent-snapshot-${{ github.run_id }}

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rooted-avd-logs-${{ github.run_number }}
          path: |
            frpc.log
            frpc.toml
          retention-days: 7
